# -*- mode: python -*-
import os, sys
# Inherit the environment from my parent.
Import('env')

# Make a copy of the environment, so my changes are limited in this directory and sub-directories.
env = env.Clone()

defineMacro = env['prjName'].upper()
config_h_content_head = """//config.h
#ifndef """ + defineMacro + """_CONFIG_H_
#define """ + defineMacro + """_CONFIG_H_
"""

config_h_content_tail = """
#endif
"""

def aGenerateConfigHeader(target, source, env):
    t = target[0]
    file = open(t.path, 'w')
    file.write(config_h_content_head)

    file.write(config_h_content_tail)
    file.close()
    return 0

env.Append(BUILDERS = {'aGenConfigHeader' : Builder(action = aGenerateConfigHeader)})

def aGenConfig(self, *args, **kwargs):
    target = self.aGenConfigHeader(*args, **kwargs)
    self.Default(target)
    self.AlwaysBuild(target)
    return target
env.AddMethod(aGenConfig)

env.aGenConfig('config.h', env['userconf'])

#env.Append(CPPPATH = env['topdir'] + '/contribute/mxml-2.2.2/')
##############################################################################################

def aSDKIncludes(self, sdk_includes = []):
    ans = []
    if sdk_includes:
        for header in sdk_includes:
            source_path = str(header)
            dest_path = os.path.abspath(source_path)
            dest_path = dest_path[dest_path.rfind("/" + env['prjName']+ "/"):]
            dest_path = self['SDK_BUILD_DIR_INCLUDE'] + dest_path
            t = env.InstallAs(dest_path, source_path)
            env.Alias('sdk', t)
            env.Default(t)
            ans.append(t)
    return ans
env.AddMethod(aSDKIncludes)
##############################################################################################
# compile all the proto

def aProtoAction(self, **kwargs):
    source = Flatten(kwargs['source'])
    protoPath = env.getUpperPath(source[0].abspath)
    print "protopath is ", protoPath
    cmd = 'protoc --proto_path='
    cmd += protoPath + ' --cpp_out=' + protoPath + ' ' + protoPath + '*.proto'
    print 'cmd is ', cmd;
    ret = os.system(cmd)
    if ret: 
        return ret
    return 0

env.AddMethod(aProtoAction)

libstructs_proto = Glob('structs/*.proto')
#env.aProtoAction(source = libstructs_proto);

#libmsdsinterface_proto = Glob('ms_ds_interface/*.proto')
#env.aProtoAction(source = libmsdsinterface_proto);
##############################################################################################
# List my sub-directories.
env.Append(LIBS=['z'])
env.Append(LIBS=['pthread'])
env.aSDKIncludes(Glob('*.h'))

kmq_common = env.aDirs('common')
kmq_core = env.aDirs('core')
kmq_api = env.aDirs('api')
kmq_service = env.aDirs('service')

# env.Requires(execute, [share])
